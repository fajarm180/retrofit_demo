// Mocks generated by Mockito 5.4.5 from annotations
// in retrofit_demo/test/network/rest/api_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit_demo/data/dto/base/item.dart' as _i2;
import 'package:retrofit_demo/data/dto/product.dart' as _i3;
import 'package:retrofit_demo/data/network/rest/api.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeXItem_0<T> extends _i1.SmartFake implements _i2.XItem<T> {
  _FakeXItem_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProduct_1 extends _i1.SmartFake implements _i3.Product {
  _FakeProduct_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i4.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.XItem<_i3.Product>> getProducts({
    Map<String, dynamic>? queries,
    int? limit = 10,
    int? skip = 0,
    String? select,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, [], {
              #queries: queries,
              #limit: limit,
              #skip: skip,
              #select: select,
            }),
            returnValue: _i5.Future<_i2.XItem<_i3.Product>>.value(
              _FakeXItem_0<_i3.Product>(
                this,
                Invocation.method(#getProducts, [], {
                  #queries: queries,
                  #limit: limit,
                  #skip: skip,
                  #select: select,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.XItem<_i3.Product>>);

  @override
  _i5.Future<_i2.XItem<_i3.Product>> searchProducts({
    required String? query,
    int? limit = 10,
    int? skip = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchProducts, [], {
              #query: query,
              #limit: limit,
              #skip: skip,
            }),
            returnValue: _i5.Future<_i2.XItem<_i3.Product>>.value(
              _FakeXItem_0<_i3.Product>(
                this,
                Invocation.method(#searchProducts, [], {
                  #query: query,
                  #limit: limit,
                  #skip: skip,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.XItem<_i3.Product>>);

  @override
  _i5.Future<_i3.Product> getProductById({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [], {#id: id}),
            returnValue: _i5.Future<_i3.Product>.value(
              _FakeProduct_1(
                this,
                Invocation.method(#getProductById, [], {#id: id}),
              ),
            ),
          )
          as _i5.Future<_i3.Product>);

  @override
  _i5.Future<_i3.Product> createProduct({required _i3.Product? product}) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [], {#product: product}),
            returnValue: _i5.Future<_i3.Product>.value(
              _FakeProduct_1(
                this,
                Invocation.method(#createProduct, [], {#product: product}),
              ),
            ),
          )
          as _i5.Future<_i3.Product>);

  @override
  _i5.Future<_i3.Product> updateProduct({
    required int? id,
    required _i3.Product? product,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [], {#id: id, #product: product}),
            returnValue: _i5.Future<_i3.Product>.value(
              _FakeProduct_1(
                this,
                Invocation.method(#updateProduct, [], {
                  #id: id,
                  #product: product,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Product>);

  @override
  _i5.Future<void> deleteProduct({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [], {#id: id}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
